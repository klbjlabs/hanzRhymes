import React, {PropTypes} from 'react';import ReactDOM from 'react-dom';export default class Index extends React.Component {    constructor(props) {        super(props);        this.state = {            rhyme: '',            isLoading: false,            characters: [],            isOften: true        };    }    handleTextChange(event) {        event.preventDefault();        event.stopPropagation();        let text = ReactDOM.findDOMNode(this.refs.charToSearch).value.trim();        if(text == '') {            this.setState({                rhyme: text,                characters: []            });        } else {            this.setState({                rhyme: text,                characters: [],                isLoading: true            });            this.searchRhyme(text, this.state.isOften);        }    }    handleIsOftenCheckboxChange(event) {        event.preventDefault();        event.stopPropagation();        let isLoading = true;        let isOften = this.state.isOften;        let text = ReactDOM.findDOMNode(this.refs.charToSearch).value.trim();        if(text == '') {            isLoading = false;        }        this.setState({            isOften: !isOften,            isLoading: isLoading,            characters: []        });        setTimeout(()=>{            this.searchRhyme(text, !isOften);        }, 150);    }    searchRhyme(text, isOften) {        Meteor.call('searchRhyme', text, isOften, (err,res)=>{            this.setState({                characters: res,                isLoading: false            });        });    }    componentDidMount() {        $('.ui.checkbox').checkbox('set checked');    }    render() {        //console.log('rendering');        let numberNode = (<p />);        let loadingNode = (<i />);        let isOften = '';        if(this.state.isOften == true) {            isOften = '常用';        }        if(this.state.isLoading == true) {            loadingNode = (                <i className="search icon" />            )        }        if(this.state.rhyme != '') {            numberNode = (                <p>共找到{this.state.characters.length}个韵脚为"{this.state.rhyme}"的{isOften}汉字</p>            );        }        let characterNodes = this.state.characters.map((character)=>{            return (                <span key={character._id}>{character.hz} </span>            );        });        return (            <div className="content-wrapper">                <div className="row">                    <div className="column">                        <h2 className="ui header">                            <i className="book icon" />                            <div className="content">                                押韵字在线查询                            </div>                        </h2>                    </div>                </div>                <div className="row">                    <div className="column">                        <div className="section-wrapper">                            <div className="ui right icon input loading">                                <input className="character" autoFocus autoCapitalize="none" autoCorrect="off" placeholder="请填写韵母" onChange={this.handleTextChange.bind(this)} type="text" ref="charToSearch" />                                {loadingNode}                            </div>                            {/*                             <div className="eight wide field">                             <button className="ui green button" type="submit" >搜索押韵字</button>                             </div>                             */}                        </div>                    </div>                </div>                <div className="row">                    <div className="column">                        <div className="section-wrapper">                            <div className="ui toggle checkbox" onClick={this.handleIsOftenCheckboxChange.bind(this)}>                                <input id="is-often" type="checkbox" tabIndex="0" value={this.state.isOften}  />                                <label htmlFor="is-often">只显示常用汉字</label>                            </div>                            {numberNode}                        </div>                    </div>                </div>                <div className="row">                    <div className="column">                        <div className="section-wrapper">                            <p>{characterNodes}</p>                        </div>                    </div>                </div>            </div>        );    }}